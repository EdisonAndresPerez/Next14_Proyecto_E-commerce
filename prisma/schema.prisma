


generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")


}

// ===== ENUMS =====

enum Genre {
  action
  adventure
  sports
  rpg
  shooter
  racing
  strategy
  simulation
  horror
  platformer
  puzzle
  fighting
  stealth
  other
}

enum Platform {
  ps5
  ps4
  ps3
  ps2
  ps1
  xbox_series_x
  xbox_series_s
  xbox_one
  xbox_360
  nintendo_switch
  nintendo_3ds
}

enum Category {
  ps5
  ps2
  ps1
  xbox
  nintendo
  pc
  retro
}

enum Role {
  admin
  user
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  cancelled
}

// ===== MODELS =====

model Country {
  id            String        @id
  name          String
  UserAddress   UserAddress[]
  OrderAddress  OrderAddress[]
}

model UserAddress {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  address     String
  address2    String?
  postalCode  String
  city        String
  phone       String
  isDefault   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  orders    Order[]

  @@map("user_addresses")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(user)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?

  // Relaciones
  userAddresses UserAddress[]
  orders        Order[]
  cart          Cart?

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  inStock     Int
  msrp        Float
  slug        String   @unique
  genre       Genre
  category    Category
  platform    Platform
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  images     ProductImage[]
  tags       ProductTag[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductTag {
  id        String  @id @default(uuid())
  name      String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_tags")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  sessionId String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relaciones
  user  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  userAddressId String?
  status        OrderStatus @default(pending)
  subtotal      Float
  tax           Float
  total         Float
  itemsInOrder  Int
  isPaid        Boolean     @default(false)
  paidAt        DateTime?
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relaciones
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAddress UserAddress? @relation(fields: [userAddressId], references: [id])
  orderItems  OrderItem[]
  orderAddress OrderAddress?

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relaciones
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderAddress {
  id          String @id @default(uuid())
  firstName   String
  lastName    String
  address     String
  address2    String?
  postalCode  String
  city        String
  phone       String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @unique
}